% Tic-tac-toe, using nats & 'draw on stalemate'
% Comments:
% Diagonals could be done using the specific values, instead of general form.

% Natural numbers
nat     : type.
z       : nat.
s   nat : nat.

% Player/Game related
draw            : pred.
player          : type.
turn    player  : pred.
token   player  : pred.        % Token means this player will have the next turn.
win     player  : pred.
opp     player  player  : bwd. % Backwards chaining predicate.

% Square/board representation
free            nat nat : pred.
occupied player nat nat : pred.

% Stages, main game
stage play = {
play
    : turn A
    * opp A B
    * free X Y
    -o occupied A X Y 
    * token B.           % Token means this player will have the next turn.
}
#interactive play.
%% play player _ row col

% We got a token, so someone made their turn.
go/win
    : qui * stage play 
    * $token A
    -o stage win.

% 'turn' is still available, so there was no free square and it's a draw.
% (this is essentially for checking "no free square)
% win conditions have already been checked after the last turn.
go/draw
    : qui * stage play
    * $turn A
    -o stage draw.

stage draw = {
draw
    : turn A
    -o draw.
}

stage win = {       % Consume the token so it doesn't go/play.
win/row
    : token B
    * occupied A X Y            % some square
    * occupied A (s X) Y        % square to the right
    * occupied A (s (s X)) Y    % another square to the right
    -o win A.
win/column
    : token B
    * occupied A X Y            % some square
    * occupied A X (s Y)        % square above
    * occupied A X (s (s Y))    % another square above
    -o win A.
win/diagonal/up
    : token B
    * occupied A X Y
    * occupied A (s X) (s Y)
    * occupied A (s (s X)) (s (s Y))
    -o win A.
win/diagonal/down
    : token B
    * occupied A X (s (s Y))
    * occupied A (s X) (s Y)
    * occupied A (s (s X)) Y
    -o win A.
}

% Next turn
go/play
    : qui * stage win
    * token A
    -o stage play
    * turn A.

% "Objects" / terms
alice : player.
bob : player.
opp alice bob.
opp bob alice.

% Init board to free
context all_free = {               % (x,y)
free    z          z,              % (0,0)
free    z          (s z),          % (0,1)
free    z          (s (s z)),      % (0,2)
free    (s z)      z,              % (1,0)
free    (s z)      (s z),          % (1,1)
free    (s z)      (s (s z)),      % (1,2)
free    (s (s z))  z,              % (2,0)
free    (s (s z))  (s z),          % (2,1)
free    (s (s z))  (s (s z))       % (2,2)
}

% Initial context
context init =
{turn alice}

#trace _ play {init, all_free}.







% Alternative diagonal rules.
% Hard coded, but possible option when generating code.
%win/diagonal/up
%    : token B
%    * occupied A z z
%    * occupied A (s z) (s z)
%    * occupied A (s (s z)) (s (s z))
%    -o win A.
%win/diagonal/down
%    : token B
%    * occupied A z (s (s z))
%    * occupied A (s z) (s z)
%    * occupied A (s (s z)) z
%    -o win A.
