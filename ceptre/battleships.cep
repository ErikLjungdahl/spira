% Battle ships
% Notes:
% With this approach, lots of repetition.
% Possible alternative:
% Generate boats by using rollback (choose one boat/square at a time).

% Could probably ignore ship geometry past setup phase...
% as long as they're setup as proper ships, it doesn't really matter.
% But want to preserve geometry.

% Nats
nat     : type.
z       : nat.
s nat   : nat.

% Player
player      : type.
alice       : player.
bob         : player.
opp player  player : bwd.
opp alice   bob.
opp bob     alice.

% Board
max/x nat : pred.       % Board width
max/y nat : pred.       % Board height
gen/y nat nat : pred.   % Token for initialization

% Operations on the board.
% "player" means that player's board.
% For example: a guess by alice will be "guess bob X Y"
hit     player nat nat : pred.
miss    player nat nat : pred.
guess   player nat nat : pred.  % A guess was made here, to be processed
open    player nat nat : pred.  % No boat placed here (for setup)
free    player nat nat : pred.  % No miss/hit here (for game)

% Boats
% Boat is a list of "positions",
% each represented by the coordinate X Y
boat    : type.
nil     : boat.             % Empty list
cons nat nat boat : boat.   % Recursive case

% Misc
owns        player boat : pred. % Player owns some boat
token/boat  player nat  : pred. % Token for placing a boat
turn        player : pred.
token/turn  player : pred.      % This player will get a turn next
maybe/boat  player : pred.      % To check if player has any boats left
has/boat    player : pred.      % Player did have a boat
no/boat     player : pred.      % Player did not have any boat
win         player : pred.

% Sinking a boat
sunk player boat : bwd.
sunk/Z : sunk P nil.            % The empty boat is sunk
sunk/S : sunk P (cons X Y Bs)   % Sink one piece, and the rest of it (if hit).
       <- hit P X Y
       <- sunk P Bs.

% Guess on 'player' 'x' 'y' given 'boat'
% Was the boat hit?
% The boat was hit if the guess was on the same square as any of the boat pieces.
was/hit player nat nat boat : bwd.
was/hit/R  : was/hit  P X Y (cons X' Y' Bs)   % Recursive case
             <- was/hit P X Y Bs.
was/hit/W  : was/hit P X Y (cons X Y Bs).     % Found witness

% Stage initialization based on "max" value.
% Basically a nested loop over X and then over Y.
% For i=0 to X:
%   put token: gen i Y
% Then for each such token,
% recursively (over Y) generate:
%   free alice x Y_j
%   open alice x Y_j
%   free bob x Y_j
%   open bob x Y_j
stage init = {
initfree/XZ
    : max/x z
    * $max/y Y
    -o gen/y z Y.
initfree/XS
    : max/x (s X)
    * $max/y Y
    -o gen/y (s X) Y
    * max/x X.
initfree/YZ
    : gen/y X z
    -o free alice X z
    * open alice X z
    * free bob X z
    * open bob X z.
initfree/YS
    : gen/y X (s Y)
    -o free alice X (s Y)
    * open alice X (s Y)
    * free bob X (s Y)
    * open bob X (s Y)
    * gen/y X Y.
}

init_to_setup
    : qui * stage init
    -o stage setup.

% Game setup, players concurrently place their boats.
% Consume 'open' to ensure boats do not overlap.
% This could possibly be done with some "rollback" approach instead.
% Note: lots of repeated code. Could this be done with functions/vectors instead somehow?
stage setup = {
fill/Z
    : token/boat P z
    * open P X Y
    -o owns P 
    (cons X Y nil).
fill/two/horizontal
    : token/boat P (s z)
    * open P X Y
    * open P (s X) Y
    -o owns P 
    (cons (s X) Y
    (cons X Y nil)).
fill/two/vertical
    : token/boat P (s z)
    * open P X Y
    * open P X (s Y)
    -o owns P 
    (cons X (s Y)
    (cons X Y nil)).
fill/three/horizontal
    : token/boat P (s (s z))
    * open P X Y
    * open P (s X) Y
    * open P (s (s X)) Y
    -o owns P
    (cons (s (s X)) Y
    (cons (s X) Y
    (cons X Y nil))).
fill/three/vertical
    : token/boat P (s (s z))
    * open P X Y
    * open P X (s Y)
    * open P X (s (s Y))
    -o owns P
    (cons X (s (s Y))
    (cons X (s Y)
    (cons X Y nil))).
}
#interactive setup.

setup_to_game
    : qui * stage setup
    -o stage game.

% Main game, simply make a guess.
% Note: we consume "free" so we can't guess on this position again.
stage game = {
do/guess
    : turn P
    * opp P P'
    * free P' X Y
    -o guess P' X Y
    * token/turn P'.
}
#interactive game.

game_to_checks
    : qui * stage game
    -o stage check_stage.

stage check_stage = {
% Confirm hit
check/hit
    : $owns P Bs
    * guess P X Y
    * was/hit P X Y Bs
    -o hit P X Y.
% Consume sunk ships
sink
    : owns P Bs
    * sunk P Bs
    -o ().
}

checks_to_boat_stage
    : qui * stage check_stage
    -o stage boat_stage.

% Check that both players have at least one boat.
% (negation for win condition: "if !boat, then win opp")
stage boat_stage = {
check/boat
    : maybe/boat P
    * $owns P Bs
    -o has/boat P.
% If 'guess' wasn't removed in last stage, it was a miss
cleanup
    : guess P X Y
    -o miss P X Y.
}

% A 'maybe/boat' token was not consumed,
% so that player didn't have a boat.
% This works because of "qui", introduced at run-time when no more rules can fire.
no_boat
    : qui * stage boat_stage
    * maybe/boat P
    -o no/boat P
    * stage win.

% Both players had a boat, go again.
go_next_round
    : qui * stage boat_stage
    * has/boat P * has/boat P'
    * token/turn P
    -o maybe/boat P * maybe/boat P'
    * turn P
    * stage game.

stage win = {
do/win
    : opp P P'
    * no/boat P'
    -o win P.
}

context init = {
max/x (s (s (s z)))
,max/y (s (s (s z)))
,token/boat alice (s z)
,token/boat bob (s z)
,token/boat alice z
,token/boat bob z
,turn alice
,maybe/boat alice
,maybe/boat bob
}

#trace _ init init.
