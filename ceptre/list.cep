% colors
color   : type.
yellow  : color.
red     : color.
isyellow color  : bwd.
isyellow  yellow.
notyellow color : bwd. % Find a way to not need this? TODO
notyellow red.
%colorEq : bwd.
%colorEq : C C. % TODO

is/all      : pred.
is/exist    : pred.
ask/all     : pred.
ask/exist   : pred.
not/exist   : pred.


colors              : type.
nil                 : colors.
cons color colors   : colors.
colors colors       : pred.

% Bwd using 'and'
allyellow colors : bwd.
allyellowZ  : allyellow nil.
allyellowS  : allyellow (cons C Cs)
            <- allyellow Cs
            <- isyellow C.

% Bwd using 'or'
existyellow colors : bwd.
existyellowS    : existyellow (cons C Cs)
                <- existyellow Cs.
existyellowS2   : existyellow (cons C Cs)
                <- isyellow C.

check colors : pred.

% TODO: check longer colors
stage main = {
% For all
check/all
    : check Cs
    * allyellow Cs
    * ask/all
    -o is/all.

% Generative existence check
check/exist/yes
    : check (cons C Cs)
    * isyellow C
    * ask/exist
    -o is/exist.
check/exist/no
    : check (cons C Cs)
    * notyellow C
    * $ask/exist
    -o check Cs.
check/exist/nil
    : check nil
    * ask/exist
    -o not/exist.

% Backwards chaining existence check
check/exist/bwd
    : check Cs
    * existyellow Cs
    * ask/exist
    -o is/exist.
}
#interactive main.

#trace _ main {ask/exist, check (cons yellow (cons red nil))}.